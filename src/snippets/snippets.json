{
    "reactComponentFlow": {
        "prefix": "rcflow",
        "body": [
            "// @flow",
            "",
            "import React, { Component } from 'react'",
            "",
            "type ${2:Props} {",
            "",
            "}",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends Component<${2:Props}> {",
            "",
            "  render() {",
            "    return (",
            "      <div>",
            "        $0",
            "      </div>",
            "   )",
            "  }",
            "}",
            "",
            "export default ${1:${TM_FILENAME_BASE}}"
        ],
        "description": "Creates a React Native class component with Flow types"
    },
    "reactNativeComponentFlow": {
        "prefix": "rncflow",
        "body": [
            "// @flow",
            "",
            "import React, { Component } from 'react'",
            "import { Text, View } from 'react-native'",
            "",
            "type ${2:Props} {",
            "",
            "}",
            "",
            "class ${1:${TM_FILENAME_BASE}} extends Component<${2:Props}> {",
            "",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "   )",
            "  }",
            "}",
            "",
            "export default ${1:${TM_FILENAME_BASE}}"
        ],
        "description": "Creates a React Native class component with Flow types"
    },
    "reactClassCompomentRedux": {
        "prefix": "rcredux",
        "body": [
            "import React, { Component } from 'react'",
            "import PropTypes from 'prop-types'",
            "import { connect } from 'react-redux'",
            "",
            "export class ${1:${TM_FILENAME_BASE}} extends Component {",
            "  static propTypes = {",
            "    ${2:prop}: ${3:PropTypes}",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <div>",
            "        $0",
            "      </div>",
            "    )",
            "  }",
            "}",
            "",
            "const mapStateToProps = (state) => ({",
            "  ",
            "})",
            "",
            "const mapDispatchToProps = {",
            "  ",
            "}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
            ""
        ],
        "description": "Creates a React component class with PropTypes with connected redux and ES7 module system"
    },
    "reduxFlowAction": {
        "prefix": "rxfaction",
        "body": [
            "// @flow",
            "",
            "type Action {",
            "",
            "}",
            "",
            "export const ${1:actionName} = (payload) => ({",
            "  type: ${3:type},",
            "  payload",
            "})",
            ""
        ]
    },
    "reduxFlowReducer": {
        "prefix": "rxfreducer",
        "body": [
            "// @flow",
            "",
            "type State {",
            "",
            "}",
            "",
            "const initialState: State = {",
            "",
            "}",
            "",
            "export default (state: State = initialState, action: Action): State => {",
            "  switch (action.type) {",
            "",
            "  case ${1:typeName}:",
            "    return { ...state, ...action.payload }",
            "",
            "  default:",
            "    return state",
            "  }",
            "}",
            ""
        ]
    },
    "reduxAction": {
        "prefix": "rxaction",
        "body": [
            "export const ${1:actionName} = (payload) => ({",
            "  type: ${3:type},",
            "  payload",
            "})",
            ""
        ]
    },
    "reduxReducer": {
        "prefix": "rxreducer",
        "body": [
            "const initialState = {",
            "",
            "}",
            "",
            "export default (state = initialState, { type, payload }) => {",
            "  switch (type) {",
            "",
            "  case ${1:typeName}:",
            "    return { ...state, ...payload }",
            "",
            "  default:",
            "    return state",
            "  }",
            "}",
            ""
        ]
    },
    "reactNativeComponent": {
        "prefix": "rnc",
        "body": [
            "import React, { Component } from 'react'",
            "import { Text, View } from 'react-native'",
            "",
            "export default class ${1:${TM_FILENAME_BASE}} extends Component {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            ""
        ]
    },
    "reactNativeComponentExport": {
        "prefix": "rnce",
        "body": [
            "import React, { Component } from 'react'",
            "import { Text, View } from 'react-native'",
            "",
            "export class ${1:${TM_FILENAME_BASE}} extends Component {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:${TM_FILENAME_BASE}}",
            ""
        ]
    },
    "reactNativePureComponent": {
        "prefix": "rnpc",
        "body": [
            "import React, { PureComponent } from 'react'",
            "import { Text, View } from 'react-native'",
            "",
            "export default class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            ""
        ]
    },
    "reactNativePureComponentExport": {
        "prefix": "rnpce",
        "body": [
            "import React, { PureComponent } from 'react'",
            "import { Text, View } from 'react-native'",
            "",
            "export class ${1:${TM_FILENAME_BASE}} extends PureComponent {",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "export default ${1:${TM_FILENAME_BASE}}",
            ""
        ]
    },
    "reactNativeClassComponentRedux": {
        "prefix": "rncredux",
        "body": [
            "import React, { Component } from 'react'",
            "import { View, Text } from 'react-native'",
            "import PropTypes from 'prop-types'",
            "import { connect } from 'react-redux'",
            "",
            "export class ${1:${TM_FILENAME_BASE}} extends Component {",
            "  static propTypes = {",
            "    ${2:prop}: ${3:PropTypes}",
            "  }",
            "",
            "  render() {",
            "    return (",
            "      <View>",
            "        <Text> ${2:textInComponent} </Text>",
            "      </View>",
            "    )",
            "  }",
            "}",
            "",
            "const mapStateToProps = (state) => ({",
            "  ",
            "})",
            "",
            "const mapDispatchToProps = {",
            "  ",
            "}",
            "",
            "export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})",
            ""
        ],
        "description": "Creates a React Native component class with PropTypes with connected redux and ES7 module system"
    },
    "Comment Big Block": {
        "prefix": "cmmb",
        "body": [
            "/**",
            "|--------------------------------------------------",
            "| $1",
            "|--------------------------------------------------",
            "*/"
        ]
    },
    "setupTest": {
        "prefix": "stest",
        "body": [
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "",
            "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
            "",
            "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})",
            ""
        ]
    },
    "setupReactNativeTest": {
        "prefix": "sntest",
        "body": [
            "import 'react-native'",
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "",
            "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
            "",
            "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />)",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})",
            ""
        ]
    },
    "setupReactComponentTestWithRedux": {
        "prefix": "srtest",
        "body": [
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "import { Provider } from 'react-redux'",
            "",
            "import store from 'src/store'",
            "import { ${1:${TM_FILENAME_BASE}} } from '../${1:${TM_FILENAME_BASE}}'",
            "",
            "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(",
            "    <Provider store={store}>",
            "     <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
            "    </Provider>,",
            "  )",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})",
            ""
        ],
        "description": "Create test component"
    },
    "setupReactNativeTestWithRedux": {
        "prefix": "snrtest",
        "body": [
            "import 'react-native'",
            "import React from 'react'",
            "import renderer from 'react-test-renderer'",
            "import { Provider } from 'react-redux'",
            "",
            "import store from 'src/store'",
            "import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}'",
            "",
            "describe('<${1:${TM_FILENAME_BASE}} />', () => {",
            "  const defaultProps = {}",
            "  const wrapper = renderer.create(",
            "    <Provider store={store}>",
            "      <${1:${TM_FILENAME_BASE}} {...defaultProps} />",
            "    </Provider>,",
            "  )",
            "",
            "  test('render', () => {",
            "    expect(wrapper).toMatchSnapshot()",
            "  })",
            "})",
            ""
        ]
    },
    "hocComponentWithRedux": {
        "prefix": "hocredux",
        "body": [
            "import React from 'react'",
            "import PropTypes from 'prop-types'",
            "import { connect } from 'react-redux'",
            "",
            "export const mapStateToProps = state => ({",
            "",
            "})",
            "",
            "export const mapDispatchToProps = {",
            " ",
            "}",
            "",
            "export const ${1:hocComponentName} = (WrappedComponent) => {",
            "  const hocComponent = ({ ...props }) => <WrappedComponent {...props} />",
            "",
            "  hocComponent.propTypes = {",
            "  }",
            "",
            "  return hocComponent",
            "}",
            "",
            "export default WrapperComponent => connect(mapStateToProps, mapDispatchToProps)(${1:hocComponentName}(WrapperComponent))",
            ""
        ]
    }
}
